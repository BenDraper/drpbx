// Code generated by MockGen. DO NOT EDIT.
// Source: transfer.go

// Package mock_transfer is a generated GoMock package.
package mock_transfer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransfer is a mock of Transfer interface.
type MockTransfer struct {
	ctrl     *gomock.Controller
	recorder *MockTransferMockRecorder
}

// MockTransferMockRecorder is the mock recorder for MockTransfer.
type MockTransferMockRecorder struct {
	mock *MockTransfer
}

// NewMockTransfer creates a new mock instance.
func NewMockTransfer(ctrl *gomock.Controller) *MockTransfer {
	mock := &MockTransfer{ctrl: ctrl}
	mock.recorder = &MockTransferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransfer) EXPECT() *MockTransferMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransfer) Create(entry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransferMockRecorder) Create(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransfer)(nil).Create), entry)
}

// Delete mocks base method.
func (m *MockTransfer) Delete(entry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransferMockRecorder) Delete(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransfer)(nil).Delete), entry)
}

// Update mocks base method.
func (m *MockTransfer) Update(entry string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransferMockRecorder) Update(entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransfer)(nil).Update), entry)
}
